services:
  server:
    build:
      context: ./server
    container_name: server
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    networks:
      - app-network
    env_file:
      - .env
    volumes:
      - ./server:/app  # Монтируем директорию для hot-reload
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    networks:
      - app-network
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    env_file:
      - .env

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf.prod:/etc/nginx/nginx.conf.prod
      - ./nginx/nginx.conf.dev:/etc/nginx/nginx.conf.dev
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/entrypoint.sh:/entrypoint.sh
    entrypoint: ["/entrypoint.sh"]
    depends_on:
      - server
      - frontend
    networks:
      - app-network
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - SERVER_PORT=${SERVER_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
    env_file:
      - .env

  db:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8080:80"
    networks:
      - app-network

  # clear_db:
  #   image: python:3.9
  #   container_name: clear_db
  #   volumes:
  #     - ./server:/app
  #   entrypoint: ["python", "/app/clear_db.py"]
  #   env_file:
  #     - .env
  #   networks:
  #     - app-network
  #   depends_on:
  #     - db

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
